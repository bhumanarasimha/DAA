def is_safe(board, row, col, N):
    # Check this row on the left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, N), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queen(board, col, N, solutions):
    # Base case: If all queens are placed, add the solution
    if col >= N:
        solution = []
        for row in board:
            solution.append(''.join('Q' if x == 1 else '.' for x in row))
        solutions.append(solution)
        return

    # Consider this column and try placing this queen in all rows one by one
    for i in range(N):
        if is_safe(board, i, col, N):
            # Place this queen in board[i][col]
            board[i][col] = 1

            # Recur to place the rest of the queens
            solve_n_queen(board, col + 1, N, solutions)

            # If placing queen in board[i][col] doesn't lead to a solution,
            # then remove queen from board[i][col] (backtrack)
            board[i][col] = 0

def solve(N):
    board = [[0] * N for _ in range(N)]
    solutions = []
    solve_n_queen(board, 0, N, solutions)
    return solutions

# Example usage:
N = 4
solutions = solve(N)
for solution in solutions:
    for row in solution:
        print(row)
    print()
