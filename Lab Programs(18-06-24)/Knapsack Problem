def knapsack_unbounded(W, weights, values, n):
    dp = [0] * (W + 1)

    for w in range(1, W + 1):
        for i in range(n):
            if weights[i] <= w:
                dp[w] = max(dp[w], dp[w - weights[i]] + values[i])

    return dp[W]

# Example usage:
values = [60, 100, 120]
weights = [10, 20, 30]
W = 50
n = len(values)

max_value = knapsack_unbounded(W, weights, values, n)
print(f"Maximum value that can be obtained in Unbounded Knapsack Problem: {max_value}")
