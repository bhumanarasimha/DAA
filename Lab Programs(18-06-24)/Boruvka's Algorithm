class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  # path compression
        return self.parent[u]
    
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            # union by rank
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def boruvka_mst(graph):
    n = len(graph)
    uf = UnionFind(n)
    mst_cost = 0
    mst_edges = []
    
    while len(mst_edges) < n - 1:
        cheapest = [-1] * n
        
        # Find the cheapest edge for each component
        for u in range(n):
            for v in range(n):
                if graph[u][v] > 0:
                    root_u = uf.find(u)
                    root_v = uf.find(v)
                    
                    if root_u != root_v:
                        if cheapest[root_u] == -1 or graph[u][v] < graph[cheapest[root_u]][root_u]:
                            cheapest[root_u] = v
                        if cheapest[root_v] == -1 or graph[u][v] < graph[cheapest[root_v]][root_v]:
                            cheapest[root_v] = u
        
        # Add the cheapest edges found to MST
        for u in range(n):
            if cheapest[u] != -1:
                v = cheapest[u]
                if uf.union(u, v):
                    mst_cost += graph[u][v]
                    mst_edges.append((u, v))
    
    return mst_cost, mst_edges

# Example usage:
graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]

mst_cost, mst_edges = boruvka_mst(graph)

print(f"Minimum Spanning Tree Cost: {mst_cost}")
print("Edges in Minimum Spanning Tree:")
for edge in mst_edges:
    print(edge)
