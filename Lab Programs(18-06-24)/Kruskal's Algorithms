class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  # path compression
        return self.parent[u]
    
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            # union by rank
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def kruskal_mst(graph):
    n = len(graph)
    edges = []
    
    # Build list of edges from adjacency matrix (considering only upper triangle)
    for i in range(n):
        for j in range(i + 1, n):
            if graph[i][j] != 0:
                edges.append((graph[i][j], i, j))
    
    # Sort edges by weight
    edges.sort()
    
    mst_cost = 0
    mst_edges = []
    uf = UnionFind(n)
    
    for weight, u, v in edges:
        if uf.union(u, v):
            mst_cost += weight
            mst_edges.append((u, v))
            if len(mst_edges) == n - 1:
                break
    
    return mst_cost, mst_edges

# Example usage:
graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]

mst_cost, mst_edges = kruskal_mst(graph)

print(f"Minimum Spanning Tree Cost: {mst_cost}")
print("Edges in Minimum Spanning Tree:")
for edge in mst_edges:
    print(edge)
