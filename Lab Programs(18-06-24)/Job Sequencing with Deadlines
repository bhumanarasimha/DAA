def job_sequencing_with_deadlines(jobs):
    # Sort jobs by profit in descending order
    jobs.sort(key=lambda x: x[2], reverse=True)
    
    max_deadline = max(jobs, key=lambda x: x[1])[1]
    time_slots = [-1] * max_deadline  # Initialize time slots array
    
    total_profit = 0
    job_sequence = []
    
    # Assign jobs to time slots
    for job in jobs:
        deadline = job[1]
        profit = job[2]
        
        # Find the latest available time slot before the job's deadline
        for j in range(deadline - 1, -1, -1):
            if time_slots[j] == -1:
                time_slots[j] = job[0]  # Assign job ID to time slot
                total_profit += profit
                job_sequence.append(job[0])
                break
    
    return total_profit, job_sequence

# Example usage:
jobs = [(1, 4, 20),  # (Job ID, Deadline, Profit)
        (2, 1, 10),
        (3, 1, 40),
        (4, 1, 30)]
        
max_profit, sequence = job_sequencing_with_deadlines(jobs)
print(f"Maximum profit: {max_profit}")
print(f"Job sequence: {sequence}")
